import Map2 from './map2.js'

describe('Map2', () => {
  it('init', () => {
    const map = new Map2()
    expect(map.size).toEqual(0)
    expect(map.map.size).toEqual(0)
  })
  it('set', () => {
    const map = new Map2()
    map.set('a', 'b', 'c')
    expect(map.size).toEqual(1)
    expect(map.map.size).toEqual(1)
    expect(map.map.get('a').size).toEqual(1)
    expect(map.get('a', 'b')).toEqual('c')
  })
  it('set same key', () => {
    const map = new Map2()
    map.set('a', 'b', 'c')
    map.set('a', 'b', 'd')
    expect(map.size).toEqual(1)
    expect(map.map.size).toEqual(1)
    expect(map.map.get('a').size).toEqual(1)
    expect(map.get('a', 'b')).toEqual('d')
  })
  it('set different key', () => {
    const map = new Map2()
    map.set('a', 'b', 'c')
    map.set('a', 'c', 'd')
    expect(map.size).toEqual(2)
    expect(map.map.size).toEqual(1)
    expect(map.map.get('a').size).toEqual(2)
    expect(map.get('a', 'b')).toEqual('c')
    expect(map.get('a', 'c')).toEqual('d')
  })
  it('delete by key', () => {
    const map = new Map2()
    map.set('a', 'b', 'c')
    map.set('a', 'c', 'd')
    expect(map.get('a', 'b')).toEqual('c')
    expect(map.get('a', 'c')).toEqual('d')
    map.delete('a', 'b')
    expect(map.size).toEqual(1)
    expect(map.map.size).toEqual(1)
    expect(map.map.get('a').size).toEqual(1)
    expect(map.get('a', 'b')).toEqual(undefined)
    expect(map.get('a', 'c')).toEqual('d')
  })
})
